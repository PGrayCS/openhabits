import { c as create_ssr_component, e as each } from "../../chunks/ssr.js";
import { e as escape } from "../../chunks/escape.js";
function todayId(d = /* @__PURE__ */ new Date()) {
  return d.toISOString().slice(0, 10);
}
function defaultState() {
  return {
    created: Date.now(),
    version: 2,
    seededStarterPack: false,
    habits: [],
    gamification: { xp: 0, level: 1, achievements: [], totalCompletions: 0, daily: { date: todayId(), xp: 0, completions: 0 } }
  };
}
function load() {
  return defaultState();
}
const state = load();
function seedStarter() {
  if (state.seededStarterPack || state.habits.length) return;
  const templates = [
    { name: "Hydration", description: "Drink a glass of water", days: [0, 1, 2, 3, 4, 5, 6], target: 1 },
    { name: "Reading", description: "Read 10 pages", days: [1, 2, 3, 4, 5], target: 1 },
    { name: "Mindfulness", description: "5 min mindfulness", days: [0, 2, 4, 6], target: 1 }
  ];
  templates.forEach((t) => state.habits.push({ id: crypto.randomUUID(), name: t.name, description: t.description, scheduleType: "daysOfWeek", days: t.days, target: t.target, history: {}, streak: 0, bestStreak: 0 }));
  state.seededStarterPack = true;
}
seedStarter();
function completionsThisWeek(h) {
  let total = 0;
  for (let i = 0; i < 7; i++) {
    const d = /* @__PURE__ */ new Date();
    d.setDate(d.getDate() - i);
    const id = todayId(d);
    total += (h.history[id] || 0) >= h.target ? 1 : 0;
  }
  return total;
}
const css = {
  code: ".app.svelte-14cufwt.svelte-14cufwt{max-width:960px;margin:2rem auto;padding:1rem;font-family:Inter,system-ui,sans-serif;color:#fff;background:#0d1218}h1.svelte-14cufwt.svelte-14cufwt{font-size:1.4rem;margin:0 0 1rem}.habits.svelte-14cufwt.svelte-14cufwt{display:grid;gap:.75rem;grid-template-columns:repeat(auto-fill,minmax(200px,1fr))}.card.svelte-14cufwt.svelte-14cufwt{background:#1c2530;border:1px solid #2c3a46;padding:.8rem .85rem;border-radius:16px;display:flex;flex-direction:column;gap:.5rem}.card.done.svelte-14cufwt.svelte-14cufwt{border-color:#3fb563}button.svelte-14cufwt.svelte-14cufwt{cursor:pointer;font:inherit;border-radius:10px;border:1px solid #2c3a46;background:#141b23;color:#fff;padding:.5rem .8rem;font-size:.7rem;letter-spacing:.5px;font-weight:600}button.primary.svelte-14cufwt.svelte-14cufwt{background:linear-gradient(135deg,#4d8dff,#7c5dff);border:0}.meta.svelte-14cufwt.svelte-14cufwt{font-size:.55rem;opacity:.75;display:flex;flex-wrap:wrap;gap:.35rem}form.svelte-14cufwt.svelte-14cufwt{display:flex;flex-direction:column;gap:.6rem;margin:1rem 0;background:#141b23;border:1px solid #2c3a46;padding:1rem;border-radius:18px}input.svelte-14cufwt.svelte-14cufwt,textarea.svelte-14cufwt.svelte-14cufwt,select.svelte-14cufwt.svelte-14cufwt{background:#1c2530;border:1px solid #2c3a46;color:#fff;padding:.5rem .65rem;border-radius:10px;font-size:.75rem}label.svelte-14cufwt.svelte-14cufwt{font-size:.6rem;text-transform:uppercase;letter-spacing:.6px;display:flex;flex-direction:column;gap:.25rem}.days.svelte-14cufwt.svelte-14cufwt{display:flex;flex-wrap:wrap;gap:.3rem}.days.svelte-14cufwt button.svelte-14cufwt{padding:.35rem .5rem;font-size:.55rem;background:#1c2530;border:1px solid #2c3a46}.days.svelte-14cufwt button.active.svelte-14cufwt{background:#4d8dff;border-color:#4d8dff}.section.svelte-14cufwt.svelte-14cufwt{margin-top:2rem}",
  map: `{"version":3,"file":"+page.svelte","sources":["+page.svelte"],"sourcesContent":["<script>\\n  import { state, addHabit, completeHabit, todayId, completionsThisWeek } from '$lib/state.js';\\n  import { onMount } from 'svelte';\\n  let newHabit = { name:'', description:'', scheduleType:'daysOfWeek', days:[0,1,2,3,4,5,6], timesPerWeek:3, target:1 };\\n  let today = new Date();\\n  let weekday = today.getDay();\\n  let showForm = false;\\n  function toggleDay(d){ if(newHabit.days.includes(d)) newHabit.days = newHabit.days.filter(x=>x!==d); else newHabit.days=[...newHabit.days,d]; }\\n  function save(){\\n    if(!newHabit.name.trim()) return;\\n    if(newHabit.scheduleType==='daysOfWeek' && newHabit.days.length===0) return;\\n    addHabit({...newHabit});\\n    newHabit = { name:'', description:'', scheduleType:'daysOfWeek', days:[0,1,2,3,4,5,6], timesPerWeek:3, target:1 };\\n    showForm=false;\\n  }\\n  function dueHabits(){\\n    return state.habits.filter(h => h.scheduleType==='timesPerWeek' ? (completionsThisWeek(h) < (h.timesPerWeek||3)) : h.days.includes(weekday));\\n  }\\n  const dayNames=['Sun','Mon','Tue','Wed','Thu','Fri','Sat'];\\n<\/script>\\n\\n<style>\\n  .app{max-width:960px;margin:2rem auto;padding:1rem;font-family:Inter,system-ui,sans-serif;color:#fff;background:#0d1218;}\\n  h1{font-size:1.4rem;margin:0 0 1rem;}\\n  .habits{display:grid;gap:.75rem;grid-template-columns:repeat(auto-fill,minmax(200px,1fr));}\\n  .card{background:#1c2530;border:1px solid #2c3a46;padding:.8rem .85rem;border-radius:16px;display:flex;flex-direction:column;gap:.5rem;}\\n  .card.done{border-color:#3fb563;}\\n  button{cursor:pointer;font:inherit;border-radius:10px;border:1px solid #2c3a46;background:#141b23;color:#fff;padding:.5rem .8rem;font-size:.7rem;letter-spacing:.5px;font-weight:600;}\\n  button.primary{background:linear-gradient(135deg,#4d8dff,#7c5dff);border:0;}\\n  .meta{font-size:.55rem;opacity:.75;display:flex;flex-wrap:wrap;gap:.35rem;}\\n  form{display:flex;flex-direction:column;gap:.6rem;margin:1rem 0;background:#141b23;border:1px solid #2c3a46;padding:1rem;border-radius:18px;}\\n  input,textarea,select{background:#1c2530;border:1px solid #2c3a46;color:#fff;padding:.5rem .65rem;border-radius:10px;font-size:.75rem;}\\n  label{font-size:.6rem;text-transform:uppercase;letter-spacing:.6px;display:flex;flex-direction:column;gap:.25rem;}\\n  .days{display:flex;flex-wrap:wrap;gap:.3rem;}\\n  .days button{padding:.35rem .5rem;font-size:.55rem;background:#1c2530;border:1px solid #2c3a46;}\\n  .days button.active{background:#4d8dff;border-color:#4d8dff;}\\n  .section{margin-top:2rem;}\\n</style>\\n\\n<div class=\\"app\\">\\n  <h1>OpenHabits (Svelte Prototype)</h1>\\n  <div class=\\"section\\">\\n    <h2 style=\\"font-size:1rem;margin:.5rem 0 .6rem;\\">Daily Quests</h2>\\n    {#if dueHabits().length === 0}\\n      <p style=\\"font-size:.7rem;opacity:.6;\\">No quests due.</p>\\n    {:else}\\n      <div class=\\"habits\\">\\n        {#each dueHabits() as h}\\n          {#key h.id}\\n          <div class=\\"card { (h.history[todayId()]||0) >= h.target ? 'done':''}\\">\\n            <strong style=\\"font-size:.85rem;\\">{h.name}</strong>\\n            <div class=\\"meta\\">\\n              <span>ðŸ”¥ {h.streak}</span>\\n              {#if h.scheduleType==='timesPerWeek'}\\n                <span>{completionsThisWeek(h)}/{h.timesPerWeek} wk</span>\\n              {:else}\\n                <span>{h.days.map(d=>dayNames[d]).join(', ')}</span>\\n              {/if}\\n              <span>{(h.history[todayId()]||0)}/{h.target}</span>\\n            </div>\\n            <button on:click={() => completeHabit(h.id)}>+1</button>\\n          </div>\\n          {/key}\\n        {/each}\\n      </div>\\n    {/if}\\n  </div>\\n\\n  <div class=\\"section\\">\\n    <div style=\\"display:flex;align-items:center;justify-content:space-between;\\">\\n      <h2 style=\\"font-size:1rem;margin:.5rem 0 .6rem;\\">All Habits</h2>\\n      <button class=\\"primary\\" on:click={()=> showForm = !showForm}>{showForm? 'Close':'Add Habit'}</button>\\n    </div>\\n    {#if showForm}\\n      <form on:submit|preventDefault={save}>\\n        <label>Name <input bind:value={newHabit.name} required maxlength={60}></label>\\n        <label>Description <textarea bind:value={newHabit.description} maxlength={240}></textarea></label>\\n        <label>Schedule Mode\\n          <select bind:value={newHabit.scheduleType}>\\n            <option value=\\"daysOfWeek\\">Days of Week</option>\\n            <option value=\\"timesPerWeek\\">Times / Week</option>\\n          </select>\\n        </label>\\n        {#if newHabit.scheduleType === 'daysOfWeek'}\\n          <div class=\\"days\\">\\n            {#each dayNames as dn,i}\\n              <button type=\\"button\\" class:active={newHabit.days.includes(i)} on:click={()=> toggleDay(i)}>{dn}</button>\\n            {/each}\\n          </div>\\n        {:else}\\n          <label>Times per Week <input type=\\"number\\" min={1} max={7} bind:value={newHabit.timesPerWeek}></label>\\n        {/if}\\n        <label>Target / Day <input type=\\"number\\" min={1} max={20} bind:value={newHabit.target}></label>\\n        <button type=\\"submit\\" class=\\"primary\\">Save</button>\\n      </form>\\n    {/if}\\n    <div class=\\"habits\\">\\n      {#each state.habits as h (h.id)}\\n        <div class=\\"card { (h.history[todayId()]||0) >= h.target ? 'done':''}\\">\\n          <strong style=\\"font-size:.85rem;\\">{h.name}</strong>\\n          <div class=\\"meta\\">\\n            <span>ðŸ”¥ {h.streak} (best {h.bestStreak})</span>\\n            {#if h.scheduleType==='timesPerWeek'}\\n              <span>{completionsThisWeek(h)}/{h.timesPerWeek} wk</span>\\n            {:else}\\n              <span>{h.days.map(d=>dayNames[d]).join(', ')}</span>\\n            {/if}\\n            <span>{(h.history[todayId()]||0)}/{h.target}</span>\\n          </div>\\n          <button on:click={() => completeHabit(h.id)}>+1</button>\\n        </div>\\n      {/each}\\n    </div>\\n  </div>\\n</div>\\n"],"names":[],"mappings":"AAsBE,kCAAI,CAAC,UAAU,KAAK,CAAC,OAAO,IAAI,CAAC,IAAI,CAAC,QAAQ,IAAI,CAAC,YAAY,KAAK,CAAC,SAAS,CAAC,UAAU,CAAC,MAAM,IAAI,CAAC,WAAW,OAAQ,CACxH,gCAAE,CAAC,UAAU,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,IAAK,CACpC,qCAAO,CAAC,QAAQ,IAAI,CAAC,IAAI,MAAM,CAAC,sBAAsB,OAAO,SAAS,CAAC,OAAO,KAAK,CAAC,GAAG,CAAC,CAAE,CAC1F,mCAAK,CAAC,WAAW,OAAO,CAAC,OAAO,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,KAAK,CAAC,MAAM,CAAC,cAAc,IAAI,CAAC,QAAQ,IAAI,CAAC,eAAe,MAAM,CAAC,IAAI,KAAM,CACvI,KAAK,mCAAK,CAAC,aAAa,OAAQ,CAChC,oCAAM,CAAC,OAAO,OAAO,CAAC,KAAK,OAAO,CAAC,cAAc,IAAI,CAAC,OAAO,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,WAAW,OAAO,CAAC,MAAM,IAAI,CAAC,QAAQ,KAAK,CAAC,KAAK,CAAC,UAAU,KAAK,CAAC,eAAe,IAAI,CAAC,YAAY,GAAI,CACrL,MAAM,sCAAQ,CAAC,WAAW,gBAAgB,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,OAAO,CAAE,CAC3E,mCAAK,CAAC,UAAU,MAAM,CAAC,QAAQ,GAAG,CAAC,QAAQ,IAAI,CAAC,UAAU,IAAI,CAAC,IAAI,MAAO,CAC1E,kCAAI,CAAC,QAAQ,IAAI,CAAC,eAAe,MAAM,CAAC,IAAI,KAAK,CAAC,OAAO,IAAI,CAAC,CAAC,CAAC,WAAW,OAAO,CAAC,OAAO,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,IAAI,CAAC,cAAc,IAAK,CAC5I,mCAAK,CAAC,sCAAQ,CAAC,oCAAM,CAAC,WAAW,OAAO,CAAC,OAAO,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,IAAI,CAAC,QAAQ,KAAK,CAAC,MAAM,CAAC,cAAc,IAAI,CAAC,UAAU,MAAO,CACtI,mCAAK,CAAC,UAAU,KAAK,CAAC,eAAe,SAAS,CAAC,eAAe,IAAI,CAAC,QAAQ,IAAI,CAAC,eAAe,MAAM,CAAC,IAAI,MAAO,CACjH,mCAAK,CAAC,QAAQ,IAAI,CAAC,UAAU,IAAI,CAAC,IAAI,KAAM,CAC5C,oBAAK,CAAC,qBAAM,CAAC,QAAQ,MAAM,CAAC,KAAK,CAAC,UAAU,MAAM,CAAC,WAAW,OAAO,CAAC,OAAO,GAAG,CAAC,KAAK,CAAC,OAAQ,CAC/F,oBAAK,CAAC,MAAM,sBAAO,CAAC,WAAW,OAAO,CAAC,aAAa,OAAQ,CAC5D,sCAAQ,CAAC,WAAW,IAAK"}`
};
const Page = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let today = /* @__PURE__ */ new Date();
  let weekday = today.getDay();
  function dueHabits() {
    return state.habits.filter((h) => h.scheduleType === "timesPerWeek" ? completionsThisWeek(h) < (h.timesPerWeek || 3) : h.days.includes(weekday));
  }
  const dayNames = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
  $$result.css.add(css);
  return `<div class="app svelte-14cufwt"><h1 class="svelte-14cufwt" data-svelte-h="svelte-1mb0ogl">OpenHabits (Svelte Prototype)</h1> <div class="section svelte-14cufwt"><h2 style="font-size:1rem;margin:.5rem 0 .6rem;" data-svelte-h="svelte-1prj10v">Daily Quests</h2> ${dueHabits().length === 0 ? `<p style="font-size:.7rem;opacity:.6;" data-svelte-h="svelte-1j2l1wf">No quests due.</p>` : `<div class="habits svelte-14cufwt">${each(dueHabits(), (h) => {
    return `<div class="${"card " + escape((h.history[todayId()] || 0) >= h.target ? "done" : "", true) + " svelte-14cufwt"}"><strong style="font-size:.85rem;">${escape(h.name)}</strong> <div class="meta svelte-14cufwt"><span>ðŸ”¥ ${escape(h.streak)}</span> ${h.scheduleType === "timesPerWeek" ? `<span>${escape(completionsThisWeek(h))}/${escape(h.timesPerWeek)} wk</span>` : `<span>${escape(h.days.map((d) => dayNames[d]).join(", "))}</span>`} <span>${escape(h.history[todayId()] || 0)}/${escape(h.target)}</span></div> <button class="svelte-14cufwt" data-svelte-h="svelte-1qgnnsf">+1</button> </div>`;
  })}</div>`}</div> <div class="section svelte-14cufwt"><div style="display:flex;align-items:center;justify-content:space-between;"><h2 style="font-size:1rem;margin:.5rem 0 .6rem;" data-svelte-h="svelte-x1szhh">All Habits</h2> <button class="primary svelte-14cufwt">${escape("Add Habit")}</button></div> ${``} <div class="habits svelte-14cufwt">${each(state.habits, (h) => {
    return `<div class="${"card " + escape((h.history[todayId()] || 0) >= h.target ? "done" : "", true) + " svelte-14cufwt"}"><strong style="font-size:.85rem;">${escape(h.name)}</strong> <div class="meta svelte-14cufwt"><span>ðŸ”¥ ${escape(h.streak)} (best ${escape(h.bestStreak)})</span> ${h.scheduleType === "timesPerWeek" ? `<span>${escape(completionsThisWeek(h))}/${escape(h.timesPerWeek)} wk</span>` : `<span>${escape(h.days.map((d) => dayNames[d]).join(", "))}</span>`} <span>${escape(h.history[todayId()] || 0)}/${escape(h.target)}</span></div> <button class="svelte-14cufwt" data-svelte-h="svelte-1qgnnsf">+1</button> </div>`;
  })}</div></div></div>`;
});
export {
  Page as default
};
